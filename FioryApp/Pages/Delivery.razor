@page "/Delivery"

@inject NavigationManager navManager
@inject IJSRuntime jsRuntime

@using FioryLibrary.Connections;
@using FioryLibrary.Operations;
@using FioryLibrary.Sales;


<audio id="wrongItem">
    <source src="audio/notaded.mp3">
    Your browser does not support the audio element.
</audio>

<input type="number" @bind="_orderNumber" @bind:event="oninput"/>
<button onclick="@load" type="button" class="btn btn-outline-primary deliveryButton">Cargar</button>

@if (_showPage == true)
{
    <button onclick="@close" type="button" class="btn btn-outline-success deliveryButton">Cerrar</button>
    <button onclick="@save" type="button" class="btn btn-outline-warning deliveryButton">Guardar</button>
    <div class="container text-center" style="margin-top: 20px;">
        <div class="row">
            <div class="col" id="dispatchContainer" style="margin-bottom: 10px;">
                <div class="row">
                    <div class="card">
                        <h5 class="card-title">Número de Orden: @_orderNumber</h5>
                    </div>
                </div>
                <div class="row">
                    <div style="padding:1rem;">
                        <table class="table table-bordered">
                            <thead>
                            <tr>
                                <th scope="col">Código</th>
                                <th scope="col">Requeridos</th>
                                <th scope="col">Despacho</th>
                            </tr>
                            </thead>
                            <tbody>
                            @if (_scan.scannedProducts.Count > 0)
                            {
                                @foreach (ScannedProduct product in _scan.scannedProducts)
                                {
                                    <tr>
                                        <td>@product.sku</td>
                                        <td>@product.requested</td>
                                        <td>@product.quantity</td>
                                    </tr>
                                }
                            }
                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <div class="card">
                            <div class="card-body">
                                Solicitados: @_order.totalProductsToScan
                            </div>
                        </div>
                    </div>
                    <div class="col">
                        <div class="card">
                            <div class="card-body">
                                Despachados: @_scan.indexScanned
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col" id="dispatchContainer">
                <div class="row">
                    <form @onsubmit="enter">
                        <div class="input-group input-group-md mb-2">
                            <span class="input-group-text" id="inputGroup-sizing-sm">EAN:</span>
                            <input type="text" class="form-control" aria-label="Sizing example input" aria-describedby="inputGroup-sizing-md" @bind="_item">
                        </div>
                    </form>
                </div>
                <div class="row justify-content-md-center">
                    <div class="col-md-auto">
                        <div class="card" style="width: 23rem;">
                            <ul class="list-group list-group-flush">
                                @foreach (string item in _items)
                                {
                                    <li class="list-group-item">@item</li>
                                }
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code{

    private readonly Contapyme _api = new();
    private readonly Order _order = new();
    private readonly Scanned _scan = new();

    private int _orderNumber;
    private string _item;
    private readonly List<string> _items = new();
    private readonly Dispatch _orderDispatched = new();

    private bool _showPage;

    private void load()
    {
        Logger.createLogFile().GetAwaiter().GetResult();
        Logger.info("Scan Operation: the operation for scanning is started for order " + _orderNumber);
        _api.setContapyme();
        _api.OrderNumber = _orderNumber;

        _order.setOrderNumber(_api.OrderNumber);
        _api.unprocess();
        _order.setOrderDetails(_api.load());

        _scan.setListScannedProducts(_order.products);
        _showPage = true;
    }

    private void enter()
    {
        if (!string.IsNullOrWhiteSpace(_item))
        {
            string sku = MasterData.vLookup(_item);
            if (string.IsNullOrEmpty(sku))
            {
                _items.Add(_item + ": no existe.");
                Logger.warning("Scan Operation: the item " + _item + " does not exist in the products Master Data.");
                jsCalledMethod("wrongItem");
            }
            else
            {
                var existsInOrder = _order.vlookup(sku);
                if (existsInOrder == true)
                {
                    _scan.addProduct(sku, _item);
                    _items.Add(_item);
                    _scan.indexScanned++;
                }
                else
                {
                    _items.Add(_item + ": no requerido.");
                    Logger.warning("Scan Operation: the item " + _item + " was not required in the order.");
                    jsCalledMethod("wrongItem");
                }
            }
        }
        _item = string.Empty;
    }

    private void setDispatch()
    {
        _orderDispatched.orderNumber = _order.orderNumber;
        _orderDispatched.setSkuDetails(_scan.scannedProducts);
        _orderDispatched.setListOfProducts(_order.products);
        _orderDispatched.setOrderDetails(_order.orderJson!);
        Sale.exportReport(_orderDispatched.orderNumber, _orderDispatched.orderJson!, _order.products, _orderDispatched.products);
    }

    private void close()
    {
        Logger.info("Scan Operation: order " + _orderNumber + " closed without save changes in Contapyme.");
        setDispatch();
        _api.process();
        _api.closeAgent();
        goToDispatch();
    }

    private void save()
    {
        Logger.info("Scan Operation: order " + _orderNumber + " saved in Contapyme");
        setDispatch();
        _api.save(_orderDispatched.orderJson!);
        _api.taxes(_orderDispatched.orderJson!);
        _api.process();
        _api.closeAgent();
        goToDispatch();
    }

    private void goToDispatch() => navManager.NavigateTo("/");

    private void jsCalledMethod(string idElement)
    {
        jsRuntime.InvokeVoidAsync("playAudio", idElement);
    }
}