@page "/Delivery"

@using Newtonsoft.Json.Linq

@using FioryApp.src.Service
@using FioryApp.src.Entity
@using FioryApp.src.Controller
@using FioryApp.src.Service.Sales

@inject NavigationManager navManager
@inject IJSRuntime jsRuntime
@inject ContapymeService api
@inject ProductController productController

<audio id="wrongItem">
    <source src="audio/notaded.mp3">
    Your browser does not support the audio element.
</audio>

@if (_showPage == false)
{
    <input type="number" @bind="_orderNumber" @bind:event="oninput"/>
    <button disabled="@isLoading" @onclick="@(async () => await LoadAsync())" type="button" class="btn btn-outline-primary deliveryButton">
        @if (isLoading)
        {
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            <span>Loading...</span>
        }
        else
        {
            <span>Cargar</span>
        }
    </button>
}
else
{
    <button disabled="@isClosing" @onclick="@(async () => await CloseAsync())" type="button" class="btn btn-outline-success deliveryButton">
        @if (isClosing)
        {
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            <span>Loading...</span>
        }
        else
        {
            <span>Cerrar sin Guardar</span>
        }
    </button>
    <button disabled="@isSaving" @onclick="@(async () => await SaveAsync())" type="button" class="btn btn-outline-warning deliveryButton">
        @if (isSaving)
        {
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            <span>Loading...</span>
        }
        else
        {
            <span>Guardar y Cerrar</span>
        }
    </button>
    <div class="container text-center" style="margin-top: 20px;">
        <div class="row">
            <div class="col" id="dispatchContainer" style="margin-bottom: 10px;">
                <div class="row">
                    <div class="card">
                        <h5 class="card-title">Número de Orden: @_orderNumber</h5>
                    </div>
                </div>
                <div class="row">
                    <div style="padding:1rem;">
                        <table class="table table-bordered">
                            <thead>
                            <tr>
                                <th scope="col">Código</th>
                                <th scope="col">Requeridos</th>
                                <th scope="col">Despacho</th>
                            </tr>
                            </thead>
                            <tbody>
                            @if (_scan.ScannedProducts.Count > 0)
                            {
                                @foreach (ProductEntity product in _scan.ScannedProducts)
                                {
                                    <tr>
                                        <td>@product.code</td>
                                        <td>@product.requested</td>
                                        <td>@product.quantity</td>
                                    </tr>
                                }
                            }
                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <div class="card">
                            <div class="card-body">
                                Solicitados: @_order.totalProductsToScan
                            </div>
                        </div>
                    </div>
                    <div class="col">
                        <div class="card">
                            <div class="card-body">
                                Despachados: @_scan.IndexScanned
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col" id="dispatchContainer">
                <div class="row">
                    <form @onsubmit="Enter">
                        <div class="input-group input-group-md mb-2">
                            <span class="input-group-text" id="inputGroup-sizing-sm">EAN:</span>
                            <input type="text" class="form-control" aria-label="Sizing example input" aria-describedby="inputGroup-sizing-md" @bind="_item">
                        </div>
                    </form>
                </div>
                <div class="row justify-content-md-center">
                    <div class="col-md-auto">
                        <div class="card" style="width: 23rem;">
                            <ul class="list-group list-group-flush">
                                @foreach (string item in _items)
                                {
                                    <li class="list-group-item">@item</li>
                                }
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code{

    private readonly Order _order = new();
    private readonly ScanController _scan = new();

    private int _orderNumber;
    private OrderEntity _orderEntity = new();
    private string _item;
    private readonly List<string> _items = new();
    private readonly Dispatch _orderDispatched = new();

    private bool _showPage;

    private bool isLoading { get; set; } = false;
    private bool isClosing { get; set; } = false;
    private bool isSaving { get; set; } = false;


    private async Task LoadAsync()
    {
        isLoading = true;
        LoggerService.createLogFile().GetAwaiter().GetResult();
        LoggerService.info("Scan Operation: the operation for scanning is started for order " + _orderNumber);

        _order.setOrderNumber(_orderNumber);
        await api.Unprocess(_orderNumber.ToString());

    //TODO: update the order details for managing the OrderEntity class

        _orderEntity = await api.Load(_orderNumber.ToString());
        JObject orderJObject = JObject.FromObject(_orderEntity);
        _order.setOrderDetails(orderJObject);

        _scan.SetListScannedProducts(_order.products);

        await Task.Delay(2000); // Example async operation
        isLoading = false;
        _showPage = true;
    }

    private void Enter()
    {
        if (!string.IsNullOrWhiteSpace(_item))
        {
            string sku = productController.vLookup(_item);
            if (string.IsNullOrEmpty(sku))
            {
                _items.Add(_item + ": no existe.");
                LoggerService.warning("Scan Operation: the item " + _item + " does not exist in the products Master Data.");
                JsCalledMethod("wrongItem");
            }
            else
            {
                var existsInOrder = _order.vlookup(sku);
                if (existsInOrder == true)
                {
                    _scan.AddProduct(sku, _item);
                    _items.Add(_item);
                    _scan.IndexScanned++;
                }
                else
                {
                    _items.Add(_item + ": no requerido.");
                    LoggerService.warning("Scan Operation: the item " + _item + " was not required in the order.");
                    JsCalledMethod("wrongItem");
                }
            }
        }
        _item = string.Empty;
    }

    private void SetDispatch()
    {
        _orderDispatched.orderNumber = _order.orderNumber;
        _orderDispatched.setSkuDetails(_scan.ScannedProducts);
        _orderDispatched.setListOfProducts(_order.products);
        _orderDispatched.setOrderDetails(_order.orderJson!);
        Sale.exportReport(_orderDispatched.orderNumber, _orderDispatched.orderJson!, _order.products, _orderDispatched.products);
    }

    private async Task CloseAsync()
    {
        isClosing = true;
        LoggerService.info("Scan Operation: order " + _orderNumber + " closed without save changes in Contapyme.");
        SetDispatch();
        await api.Process(_orderNumber.ToString());
        isClosing = false;
        GoToDispatch();
    }

    private async Task SaveAsync()
    {
        isSaving = true;
        LoggerService.info("Scan Operation: order " + _orderNumber + " saved in Contapyme");
        SetDispatch();

    //TODO: update the order details for managing the OrderEntity class
        await api.Save(_orderNumber.ToString(), _orderEntity);
        await api.Taxes(_orderNumber.ToString(), _orderEntity);

        await api.Process(_orderNumber.ToString());
        isSaving = false;
        GoToDispatch();
    }

    private void GoToDispatch() => navManager.NavigateTo("/");

    private void JsCalledMethod(string idElement)
    {
        jsRuntime.InvokeVoidAsync("playAudio", idElement);
    }

}