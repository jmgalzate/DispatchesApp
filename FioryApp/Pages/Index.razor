@page "/"

@using FioryApp.Service;
@using FioryApp.Entity

@inject NavigationManager navManager
@inject SessionService sessionService
@inject ContapymeService api


<div class="p-5 mb-4 bg-light rounded-3">
    <div class="container-fluid py-5">
        <h1 class="display-5 fw-bold">Sistema de Despacho Fiory</h1>
    </div>
</div>

<div class="row align-items-md-stretch" style="padding-left: 2%; padding-right: 2%;">
    <div class="col-md-5">
        <div class="h-100 p-5 text-white bg-dark rounded-3">

            <!-- Start Products -->
            <h2>Conexión con Contapyme</h2>
            <hr>
            <!--Start Session Section-->
            @if (string.IsNullOrEmpty(sessionService.keyAgent))
            {
                <button disabled="@isStartingSession" 
                        @onclick="@(async () => await StartSessionAsync())"
                        type="button" class="btn btn-primary deliveryButton">
                    @if (isStartingSession)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span>Loading...</span>
                    }
                    else
                    {
                        <span>Iniciar Agente</span>
                    }
                </button>
            }
            else
            {
                <button disabled="@isClosingSession" 
                        @onclick="@(async () => await CloseSessionAsync())" 
                        type="button" class="btn btn-danger deliveryButton">
                    @if (isClosingSession)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span>Loading...</span>
                    }
                    else
                    {
                        <span>Cerrar Agente</span>
                    }
                </button>
            }
            <!-- End Session Section-->

            <button type="button" class="btn @GetButtonClass()"
                    disabled="@isButtonEnabled"
                    @onclick="@(async () => await LoadProductsAsync())"
                    >
                @if (isLoadingProducts)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    <span>Loading...</span>
                }
                else
                {
                    <span>Cargar Productos</span>
                }
            </button>
        </div>
    </div>
    <div class="col-md-7">
        <div class="h-100 p-5 bg-light border rounded-3">
            <!-- Start Files-->
            <h2>Despachos Efectuados</h2>

            <button type="button" class="btn @GetButtonClass()"
                    disabled="@isButtonEnabledAddDispatch"
                    @onclick="GoToDispatch"
                    >
                Agregar Despacho
            </button>
            <br><br>
            <p>Estas son las órdenes que tienes en la carpeta: @folderRoot</p>

            @if (filesInRoot.Count > 0)
            {
                <ul>
                    @foreach (string file in filesInRoot)
                    {
                        <li>@file</li>
                    }
                </ul>
            }
            <!-- End files-->
        </div>
    </div>
</div>

@code {
    private void GoToDispatch() => navManager.NavigateTo("/Delivery");
    private static string folderRoot => ConfigFilesService.GetReportFilesPath();
    private static List<string> filesInRoot => ConfigFilesService.GetFilesInFolder(folderRoot);

    private bool isStartingSession { get; set; } = false;
    private bool isClosingSession { get; set; } = false;
    private bool isLoadingProducts { get; set; } = false;

    private bool isButtonEnabled => string.IsNullOrEmpty(sessionService.keyAgent) || isLoadingProducts;

    private bool isButtonEnabledAddDispatch => string.IsNullOrEmpty(sessionService.keyAgent) || (sessionService
        .sessionProducts == 0);

    private async Task StartSessionAsync()
    {
        isStartingSession = true;

        await api.SetContapymeAsync();
        sessionService.UpdateSessionKeyAgent(api.agentkey);

        isStartingSession = false;
    }

    private async Task CloseSessionAsync()
    {
        isClosingSession = true;

        await api.CloseAgentAsync();
        sessionService.UpdateSessionKeyAgent(null);
        sessionService.UpdateSessionProducts(null);

        isClosingSession = false;
    }

    private async Task LoadProductsAsync()
    {
        isLoadingProducts = true;
        List<ProductEntity> products = await api.GetProductsAsync();
        sessionService.UpdateSessionProducts(products);
        isLoadingProducts = false;
    }

    private string GetButtonClass()
    {
        return isButtonEnabled ? "btn-outline-primary deliveryButton" : "btn-primary deliveryButton";
    }

}